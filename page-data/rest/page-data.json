{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/rest","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"REST\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Representational state transfer\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Stark an HTTP gebunden, URL adressierbar\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Response Encodings: XML, JSON, HTML, andere denkbar\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Zustandslos, CRUD: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Chunking:\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"\", \"[...]\", \" the data stream is divided into a series of non-overlapping \\\"chunks\\\". The chunks are sent out and\")), mdx(\"p\", null, \"received independently of one another. No knowledge of the data stream outside the currently-being-processed chunk is\\nnecessary for both the sender and the receiver at any given time.\\\" \", mdx(\"sup\", {\n    parentName: \"p\",\n    \"id\": \"fnref-chunk\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-chunk\",\n    \"className\": \"footnote-ref\"\n  }, \"chunk\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Compression\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Multipart:\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"The multipart mime format is used to pass lists of content bodies. Multiple content bodies are embedded in one\\nmessage. multipart/form-data is often found in web application HTML Form documents and is generally used to upload\\nfiles. The form-data format is the same as other multipart formats, except that each inlined piece of content has a\\nname associated with it.\\\" \", mdx(\"sup\", {\n    parentName: \"p\",\n    \"id\": \"fnref-multip\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-multip\",\n    \"className\": \"footnote-ref\"\n  }, \"multip\")))), mdx(\"p\", null, \"Eigenschaften \", mdx(\"sup\", {\n    parentName: \"p\",\n    \"id\": \"fnref-restwiki\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-restwiki\",\n    \"className\": \"footnote-ref\"\n  }, \"restwiki\")), \":\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Client-Server\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Zustandslosigkeit\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Caching\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Einheitliche Schnittstelle\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adressierbarkeit von Ressourcen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Repr\\xE4sentationen zur Ver\\xE4nderung von Ressourcen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Selbstbeschreibende Nachrichten\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u201EHypermedia as the Engine of Application State\\u201C (HATEOAS)\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Mehrschichtige Systeme\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Code on Demand (optional)\")), mdx(\"h2\", null, \"HATEOAS\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"HATEOAS (Hypermedia as the Engine of Application State)\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"REST architectural style lets us use the hypermedia links in the response contents. It allows the client can\\ndynamically navigate to the appropriate resources by traversing the hypermedia links.\\\" \", mdx(\"sup\", {\n    parentName: \"li\",\n    \"id\": \"fnref-hateoas\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-hateoas\",\n    \"className\": \"footnote-ref\"\n  }, \"hateoas\")))), mdx(\"h2\", null, \"RMM\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"A model (developed by Leonard Richardson) that breaks down the principal elements of a REST approach into three\\nsteps. These introduce resources, http verbs, and hypermedia controls.\\\" \", mdx(\"sup\", {\n    parentName: \"p\",\n    \"id\": \"fnref-fowler\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-fowler\",\n    \"className\": \"footnote-ref\"\n  }, \"fowler\")))), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Level 0:\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"The starting point for the model is using HTTP as a transport system for remote interactions, but without using any\\nof the mechanisms of the web. Essentially what you are doing here is using HTTP as a tunneling mechanism for your own\\nremote interaction mechanism, usually based on Remote Procedure Invocation.\\\"\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Level 1:\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"The first step towards the Glory of Rest in the RMM is to introduce resources. So now rather than making all our\\nrequests to a singular service endpoint, we now start talking to individual resources.\\\"\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Level 2:\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"I've used HTTP POST verbs for all my interactions here in level 0 and 1, but some people use GETs instead or in\\naddition. At these levels it doesn't make much difference, they are both being used as tunneling mechanisms allowing\\nyou to tunnel your interactions through HTTP. Level 2 moves away from this, using the HTTP verbs as closely as\\npossible to how they are used in HTTP itself.\\\"\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Level 3:\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"The final level introduces something that you often hear referred to under the ugly acronym of HATEOAS (Hypertext As\\nThe Engine Of Application State). It addresses the question of how to get from a list open slots to knowing what to do\\nto book an appointment.\\\"\")), mdx(\"p\", null, \"...\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"The point of hypermedia controls is that they tell us what we can do next, and the URI of the resource we need to\\nmanipulate to do it. Rather than us having to know where to post our appointment request, the hypermedia controls in\\nthe response tell us how to do it.\\\"\")), mdx(\"p\", null, \"Advantages of hypermedia controls:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"One obvious benefit of hypermedia controls is that it allows the server to change its URI scheme without breaking\\nclients\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"A further benefit is that it helps client developers explore the protocol.\\\"\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/cloud-computing-notes/53e157cfd76a4bde9ededc363bb7f03e/rmm.png\",\n    \"alt\": null\n  })), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"See: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://restfulapi.net/\"\n  }, \"https://restfulapi.net/\"))), mdx(\"div\", {\n    \"className\": \"footnotes\"\n  }, mdx(\"hr\", {\n    parentName: \"div\"\n  }), mdx(\"ol\", {\n    parentName: \"div\"\n  }, mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-chunk\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Chunked_transfer_encoding\"\n  }, \"https://en.wikipedia.org/wiki/Chunked_transfer_encoding\"), mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-chunk\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")), mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-multip\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://quarkus.io/guides/rest-client-multipart\"\n  }, \"https://quarkus.io/guides/rest-client-multipart\"), mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-multip\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")), mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-restwiki\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://de.wikipedia.org/wiki/Representational_State_Transfer\"\n  }, \"https://de.wikipedia.org/wiki/Representational_State_Transfer\"), mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-restwiki\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")), mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-hateoas\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://restfulapi.net/hateoas/\"\n  }, \"https://restfulapi.net/hateoas/\"), mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-hateoas\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")), mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-fowler\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://martinfowler.com/articles/richardsonMaturityModel.html\"\n  }, \"https://martinfowler.com/articles/richardsonMaturityModel.html\"), mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-fowler\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[{"contextLine":"- [[REST]]","referrer":{"parent":{"id":"ff7933ec-c2bb-5b64-acd9-a3be0a6c2893","fields":{"slug":"/service-oriented-architecture","title":"service-oriented-architecture(SOA)"}}}}]},"fields":{"slug":"/rest","title":"REST"}}},"pageContext":{"id":"93f0eda5-061e-5c41-9916-4ac60de7362a"}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}