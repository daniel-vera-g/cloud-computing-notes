{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/multiversion-concurrency-control","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"multiversion-concurrency-control\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"L\\xF6st das Problem des Konkurrierenden Zugriffs ohne \\u201ELocks\\u201C\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Daten sind \\u201EImmutable\\u201C: Schreibzugriffe erzeugen neue Version.\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Lesen\"), \": funktioniert immer - eventuell bekomme ich eine \\u201Ealte\\u201C Version\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Schreiben\"), \": Eine Transaktion kennt die daf\\xFCr gelesene Version des Objekts. Ist diese nicht mehr aktuell wird die\\nTransaktion abgebrochen.\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[{"contextLine":"- [[multiversion-concurrency-control]]","referrer":{"parent":{"id":"558193fc-67dc-52e1-a6b4-dac2452a6176","fields":{"slug":"/verteilung-von-daten","title":"verteilung-von-daten"}}}}]},"fields":{"slug":"/multiversion-concurrency-control","title":"multiversion-concurrency-control"}}},"pageContext":{"id":"660a5dc6-8da5-5134-8f9f-0923a8a6f142"}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}