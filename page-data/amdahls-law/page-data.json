{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/amdahls-law","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"amdahls-law\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"Modell in der Informatik \\xFCber die Beschleunigung von Programmen durch parallele Ausf\\xFChrung.\\\"\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Der parallelisierbare Part l\\xE4sst sich durch mehr/bessere Hardware verschnellern\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Der nicht parallelisierbare Teil ist nur durch code optimierung verbesserbar\")), mdx(\"h2\", null, \"Mathematische definition\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"p = der O(n) parallelisierbare Teil eines Programmes\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"s = der sequenzielle (nicht parallelisierbare) Teil des Programmes\")), mdx(\"p\", null, \"Maximale Geschwindigkeitsgewinn durch:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"s+p / s+p/N bei N Cores/CPUs gegeben\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Das gilt selbst wenn der Kommunikationsoverhead etc. vernachl\\xE4ssigbar\")), mdx(\"h2\", null, \"Quellen\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://tutorials.jenkov.com/java-concurrency/amdahls-law.html\"\n  }, \"http://tutorials.jenkov.com/java-concurrency/amdahls-law.html\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://de.wikipedia.org/wiki/Amdahlsches_Gesetz\"\n  }, \"https://de.wikipedia.org/wiki/Amdahlsches_Gesetz\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[{"contextLine":"- [[amdahls-law]]","referrer":{"parent":{"id":"6884d127-348d-5ffc-8eb2-0d71e07dbf1c","fields":{"slug":"/verteilung-von-code","title":"verteilung-von-code"}}}}]},"fields":{"slug":"/amdahls-law","title":"amdahls-law"}}},"pageContext":{"id":"04652e17-ca28-5396-bd3e-d4b3a84c6021","refWordMdxSlugDict":{}}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}