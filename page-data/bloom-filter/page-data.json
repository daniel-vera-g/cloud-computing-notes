{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/bloom-filter","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"bloom-filter\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"A Bloom filter is a data structure designed to tell you, rapidly and memory-efficiently, whether an element is\\npresent in a set.\\\"\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"it tells us that the element either definitely is not in the set or may be in the set.\\\"\")), mdx(\"h2\", null, \"Funktionsweise\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/cloud-computing-notes/e5df79fe227d26087a2452f38bfd79e7/bloom-filter.png\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"Mit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"h(n) = n mod m\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \": Key\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"m\"), \": Length of Filter\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Element \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n\"), \" mit Hashfunktion hashen\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"h(n) = 0\"), \" -> Element nicht vorhanden\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"h(n) = 1\"), \" -> Element \\\"m\\xF6glicherweise\\\" vorhanden, da auch eine anderes Element an der Stelle sein k\\xF6nnte\")), mdx(\"h2\", null, \"Beispielhafter pseudocode\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"function bloomFilter(ortsname) {\\n\\n  int filterLength = 10\\n  int filter = array[filterLength]\\n\\n  // h(n) -> Hash function\\n  int position = h(ortsname) % filterLength\\n\\n  if(filter[position] == 0) return false // Not there\\n  return true // Probably there\\n}\"))), mdx(\"h2\", null, \"Quellen\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://youtu.be/gBygn3cVP80\"\n  }, \"https://youtu.be/gBygn3cVP80\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://de.wikipedia.org/wiki/Bloomfilter\"\n  }, \"https://de.wikipedia.org/wiki/Bloomfilter\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Bloom_filter\"\n  }, \"https://en.wikipedia.org/wiki/Bloom_filter\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Interactive tutorial: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://llimllib.github.io/bloomfilter-tutorial/\"\n  }, \"https://llimllib.github.io/bloomfilter-tutorial/\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[{"contextLine":"- [[bloom-filter]]","referrer":{"parent":{"id":"3b76070b-156a-59aa-9832-0506402a52a7","fields":{"slug":"/algorithmische-optimierung-des-datenzugriffs","title":"algorithmische-optimierung-des-datenzugriffs"}}}}]},"fields":{"slug":"/bloom-filter","title":"bloom-filter"}}},"pageContext":{"id":"c64b6e5b-251a-5ff2-8127-72f74ad29978"}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}