{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/verteilung-von-daten","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"verteilung-von-daten\"), mdx(\"h2\", null, \"Probleme bei Verteilung von Daten\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"brewers-theorem\",\n    \"title\": \"brewers-theorem\"\n  }, \"[[brewers-theorem]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"multiversion-concurrency-control\",\n    \"title\": \"multiversion-concurrency-control\"\n  }, \"[[multiversion-concurrency-control]]\"), \"\")), mdx(\"h2\", null, \"Patterns f\\xFCr die Verteilung von Daten\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"shared-nothing\",\n    \"title\": \"shared-nothing\"\n  }, \"[[shared-nothing]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"shared-disk-architecture\",\n    \"title\": \"shared-disk-architecture\"\n  }, \"[[shared-disk-architecture]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"consistent-hashing\",\n    \"title\": \"consistent-hashing\"\n  }, \"[[consistent-hashing]]\"), \"\")), mdx(\"h2\", null, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://de.wikipedia.org/wiki/Shared_Nothing_Architecture\"\n  }, \"https://de.wikipedia.org/wiki/Shared_Nothing_Architecture\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Shared_disk_architecture\"\n  }, \"https://en.wikipedia.org/wiki/Shared_disk_architecture\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.geeksforgeeks.org/difference-between-shared-nothing-architecture-and-shared-disk-architecture/\"\n  }, \"https://www.geeksforgeeks.org/difference-between-shared-nothing-architecture-and-shared-disk-architecture/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.bigdata-insider.de/was-ist-eine-shared-nothing-architektur-a-818728/\"\n  }, \"https://www.bigdata-insider.de/was-ist-eine-shared-nothing-architektur-a-818728/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://www.benstopford.com/2009/11/24/understanding-the-shared-nothing-architecture/\"\n  }, \"http://www.benstopford.com/2009/11/24/understanding-the-shared-nothing-architecture/\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[{"contextLine":"- [[brewers-theorem]]","targetAnchor":null,"refWord":"brewers-theorem","target":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"brewers-theorem\"), mdx(\"p\", null, \"Ein Verteiltes System kann nur zwei der folgenden drei Eigenschaften erf\\xFCllen:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Konsistenz (C)\"), \": Alle Knoten sehen zur selben Zeit die selben Daten\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Verf\\xFCgbarkeit (A)\"), \": Alle! Anfragen an das System werden stets beantwortet\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Partitionstoleranz (P)\"), \": Das System setzt keine perfekte Kommunikationsinfrastruktur voraus. Nachrichten k\\xF6nnen\\nverloren gehen das Netz kann\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"9e1c9d4e-0158-5021-9e09-50ff7e9c17ad","fields":{"slug":"/brewers-theorem","title":"brewers-theorem"}}}},{"contextLine":"- [[multiversion-concurrency-control]]","targetAnchor":null,"refWord":"multiversion-concurrency-control","target":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"multiversion-concurrency-control\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"L\\xF6st das Problem des Konkurrierenden Zugriffs ohne \\u201ELocks\\u201C\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Daten sind \\u201EImmutable\\u201C: Schreibzugriffe erzeugen neue Version.\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Lesen\"), \": funktioniert immer - eventuell bekomme ich eine \\u201Ealte\\u201C Version\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Schreiben\"), \": Eine Transaktion kennt die daf\\xFCr gelesene Version des Objekts. Ist diese nicht mehr aktuell wird die\\nTransaktion abgebrochen.\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"660a5dc6-8da5-5134-8f9f-0923a8a6f142","fields":{"slug":"/multiversion-concurrency-control","title":"multiversion-concurrency-control"}}}},{"contextLine":"1. [[shared-nothing]]","targetAnchor":null,"refWord":"shared-nothing","target":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"shared-nothing\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/cloud-computing-notes/00b9da068c7ec6d69c519ee7ee696024/shared-nothing.jpg\",\n    \"alt\": null\n  })), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Daten sind partitioniert (Sharding) und lokal zum verarbeitenden Knoten\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(unendlich) skalierbar\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Pro:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gut bei hoher Lese/Schreibe Last\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Con:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Schlecht bei Transaktionen \\xFCber das Cluster\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Schlecht bei Datenverkn\\xFCpfungen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Weitere Kapazit\\xE4t Ausbau \\u201Eteuer\\u201C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HA nur beschr\\xE4nkt m\\xF6glich\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Schwer zu \\u201Ebalancen\\u201C\")))), mdx(\"h2\", null, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Image: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://tideways.com/wp-content/uploads/import/blog/shared-nothing-architecture.png\"\n  }, \"https://tideways.com/wp-content/uploads/import/blog/shared-nothing-architecture.png\"))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"cb39dcd6-7ae9-53ec-8729-ee9391485ab2","fields":{"slug":"/shared-nothing","title":"shared-nothing"}}}},{"contextLine":"2. [[shared-disk-architecture]]","targetAnchor":null,"refWord":"shared-disk-architecture","target":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"shared-disk-architecture\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/cloud-computing-notes/170397935cb9bbf57e3467d6ff461091/shared-disk-architecture.png\",\n    \"alt\": null\n  })), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Pro:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adaptiert schnell bei unterschiedlichen Last Szenarien (dynamisches Loadbalancing)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Failover / HA ist einfach\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Con:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Schlecht bei hoher Schreibe Last (dirty Caches in den Knoten)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Preis der Skalierung abh\\xE4ngig von der eingesetzten Technologie\")))), mdx(\"h2\", null, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Images: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://upload.wikimedia.org/wikipedia/commons/0/07/Shared_Disk_Architecture.jpg\"\n  }, \"https://upload.wikimedia.org/wikipedia/commons/0/07/Shared_Disk_Architecture.jpg\"))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"22b6f149-5381-5b48-a962-e52877ac72e7","fields":{"slug":"/shared-disk-architecture","title":"shared-disk-architecture"}}}},{"contextLine":"3. [[consistent-hashing]]","targetAnchor":null,"refWord":"consistent-hashing","target":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"consistent-hashing\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Problem: Wie finde ich den Speicherort f\\xFCr ein Objekt in einem verteilten System mit n Knoten?\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/cloud-computing-notes/a4b0503b36c64949010762f7cf8b9a92/consistent-hashing.png\",\n    \"alt\": null\n  })), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Knoten werden in Adressraum/Hashtabelle (0..S) angeordnet (z.B. durch Hashen der IP)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Objekte werden mit der gleichen Hashfunktion gehashed\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Der Zust\\xE4ndige Knoten ist der mit dem n\\xE4chsth\\xF6heren Hashwert (im Uhrzeigersinn der n\\xE4chste)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Knoten werden mehrfach \\u201Evirtualisiert\\u201C im Ring angeordnet (z.B durch Hash (\\u201EIP1-1\\u201C), Hash (\\u201EIP1-2\\u201C), \\u2026)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Anzahl der virtuellen Punkte pro Knoten kann auch anhand der Leistungsst\\xE4rke variiert werden\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Anordnung kann auch anhand von \\u201EPartitionen\\u201C erfolgen\")), mdx(\"h2\", null, \"Vorteile\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gleichm\\xE4\\xDFige Verteilung der Last wenn sich die Anzahl der Knoten\\xE4ndert\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dynamische Anpassung der Last durch die Anzahl \\u201Evirtueller Punkte\\u201C m\\xF6glich => langsames Anfahren\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Redundanz / Replikation durch weitere Schreib Vorg\\xE4nge beim \\u201En\\xE4chsten\\u201C, \\u201E\\xFCbern\\xE4chsten\\u201C etc. Knoten.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dadurch auch bereits \\u201Egef\\xFCllter Cache\\u201C m\\xF6glich\")), mdx(\"h2\", null, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Image: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://i0.wp.com/www.acodersjourney.com/wp-content/uploads/2017/08/Consistent-Hashing-Adding-Servers.jpg\"\n  }, \"https://i0.wp.com/www.acodersjourney.com/wp-content/uploads/2017/08/Consistent-Hashing-Adding-Servers.jpg\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Consistent_hashing\"\n  }, \"https://en.wikipedia.org/wiki/Consistent_hashing\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discord uses consistent hashing \\uD83E\\uDD14: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://blog.discord.com/scaling-elixir-f9b8e1e7c29b\"\n  }, \"https://blog.discord.com/scaling-elixir-f9b8e1e7c29b\"))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"6b5f86c3-7524-5924-a96e-d73624d73356","fields":{"slug":"/consistent-hashing","title":"consistent-hashing"}}}}],"inboundReferences":[{"contextLine":"1. [[verteilung-von-daten]]","referrer":{"parent":{"id":"54974a1e-d582-5efe-bcf6-96c13af30c59","fields":{"slug":"/cloud-algorithmen-patterns","title":"Cloud algorithmen und patterns"}}}}]},"fields":{"slug":"/verteilung-von-daten","title":"verteilung-von-daten"}}},"pageContext":{"id":"558193fc-67dc-52e1-a6b4-dac2452a6176"}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}