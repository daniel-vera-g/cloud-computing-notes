{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/sharding","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"sharding\"), mdx(\"h2\", null, \"Difference sharding \", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"consistent-hashing\",\n    \"title\": \"consistent-hashing\"\n  }, \"[[consistent-hashing]]\"), \"\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"You can think of sharding as the decision to put your data on multiple machines, and consistent hashing as one of\\nmany methods of determining which machine any particular piece of data goes to.\\\" \", mdx(\"sup\", {\n    parentName: \"p\",\n    \"id\": \"fnref-shard\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-shard\",\n    \"className\": \"footnote-ref\"\n  }, \"shard\")))), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Sharding is the act of taking a data set and splitting it across multiple machines. When you shard you say you\\u2019re\\nmoving data around, but you haven\\u2019t yet answered the question of which machine takes what subset of data.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Consistent hashing is an algorithm for assigning a set of keys to machines\")), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Man kann sharding ohne consistent hashing nutzen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reines consistent hashing kann auch Vorteile haben\")), mdx(\"h2\", null, \"Pro/Con sharding\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Pro\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Con\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Very good scaling\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Merging and splitting can get complicated\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Avoids over usage\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"It has to be taken care on application level\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Improves partion tolerance\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Shards are complicated\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Source:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.quora.com/What-advantages-and-disadvantages-does-database-sharding-have\"\n  }, \"https://www.quora.com/What-advantages-and-disadvantages-does-database-sharding-have\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://medium.com/system-design-blog/database-sharding-69f3f4bd96db\"\n  }, \"https://medium.com/system-design-blog/database-sharding-69f3f4bd96db\"))))), mdx(\"div\", {\n    \"className\": \"footnotes\"\n  }, mdx(\"hr\", {\n    parentName: \"div\"\n  }), mdx(\"ol\", {\n    parentName: \"div\"\n  }, mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-shard\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.quora.com/What-is-the-difference-between-consistent-hashing-and-sharding-in-a-distributed-system\"\n  }, \"https://www.quora.com/What-is-the-difference-between-consistent-hashing-and-sharding-in-a-distributed-system\"), mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-shard\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[{"contextLine":"## Difference sharding [[consistent-hashing]]","targetAnchor":null,"refWord":"consistent-hashing","target":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"consistent-hashing\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Problem: Wie finde ich den Speicherort f\\xFCr ein Objekt in einem verteilten System mit n Knoten?\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/cloud-computing-notes/a4b0503b36c64949010762f7cf8b9a92/consistent-hashing.png\",\n    \"alt\": null\n  })), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Knoten werden in Adressraum/Hashtabelle (0..S) angeordnet (z.B. durch Hashen der IP)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Objekte werden mit der gleichen Hashfunktion gehashed\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Der Zust\\xE4ndige Knoten ist der mit dem n\\xE4chsth\\xF6heren Hashwert (im Uhrzeigersinn der n\\xE4chste)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Knoten werden mehrfach \\u201Evirtualisiert\\u201C im Ring angeordnet (z.B durch Hash (\\u201EIP1-1\\u201C), Hash (\\u201EIP1-2\\u201C), \\u2026)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Anzahl der virtuellen Punkte pro Knoten kann auch anhand der Leistungsst\\xE4rke variiert werden\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Anordnung kann auch anhand von \\u201EPartitionen\\u201C erfolgen\")), mdx(\"h2\", null, \"Vorteile\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gleichm\\xE4\\xDFige Verteilung der Last wenn sich die Anzahl der Knoten\\xE4ndert\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dynamische Anpassung der Last durch die Anzahl \\u201Evirtueller Punkte\\u201C m\\xF6glich => langsames Anfahren\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Redundanz / Replikation durch weitere Schreib Vorg\\xE4nge beim \\u201En\\xE4chsten\\u201C, \\u201E\\xFCbern\\xE4chsten\\u201C etc. Knoten.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dadurch auch bereits \\u201Egef\\xFCllter Cache\\u201C m\\xF6glich\")), mdx(\"h2\", null, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Image: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://i0.wp.com/www.acodersjourney.com/wp-content/uploads/2017/08/Consistent-Hashing-Adding-Servers.jpg\"\n  }, \"https://i0.wp.com/www.acodersjourney.com/wp-content/uploads/2017/08/Consistent-Hashing-Adding-Servers.jpg\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Consistent_hashing\"\n  }, \"https://en.wikipedia.org/wiki/Consistent_hashing\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discord uses consistent hashing \\uD83E\\uDD14: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://blog.discord.com/scaling-elixir-f9b8e1e7c29b\"\n  }, \"https://blog.discord.com/scaling-elixir-f9b8e1e7c29b\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Good resource: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.toptal.com/big-data/consistent-hashing\"\n  }, \"https://www.toptal.com/big-data/consistent-hashing\"))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"6b5f86c3-7524-5924-a96e-d73624d73356","fields":{"slug":"/consistent-hashing","title":"consistent-hashing"}}}}],"inboundReferences":[{"contextLine":"- See also: [[sharding]]","referrer":{"parent":{"id":"22b6f149-5381-5b48-a962-e52877ac72e7","fields":{"slug":"/shared-disk-architecture","title":"shared-disk-architecture"}}}}]},"fields":{"slug":"/sharding","title":"sharding"}}},"pageContext":{"id":"8bbe0959-8054-59be-b8e4-66210387642a","refWordMdxSlugDict":{"consistent-hashing":"consistent-hashing"}}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}