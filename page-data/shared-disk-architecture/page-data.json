{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/shared-disk-architecture","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"shared-disk-architecture\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"Shared Disk Architecture is an architecture which is used in distributed computing in which the nodes share same disk\\ndevices but each node has its own private memory. The disks have active nodes which share memory in case of any\\nfailures. In this architecture the disks are accessible from all the cluster nodes. This architecture has quick\\nadaptability to the changing workloads. It uses robust optimization techniques.\\\" \", mdx(\"sup\", {\n    parentName: \"p\",\n    \"id\": \"fnref-sn\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-sn\",\n    \"className\": \"footnote-ref\"\n  }, \"sn\")))), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/cloud-computing-notes/170397935cb9bbf57e3467d6ff461091/shared-disk-architecture.png\",\n    \"alt\": null\n  })), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Pro:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adaptiert schnell bei unterschiedlichen Last Szenarien (dynamisches Loadbalancing)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Failover / HA ist einfach\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Con:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Schlecht bei hoher Schreibe Last (dirty Caches in den Knoten)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Preis der Skalierung abh\\xE4ngig von der eingesetzten Technologie\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"See also: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/sharding\",\n    \"title\": \"sharding\"\n  }, \"[[sharding]]\"), \"\")), mdx(\"h2\", null, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Images: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://upload.wikimedia.org/wikipedia/commons/0/07/Shared_Disk_Architecture.jpg\"\n  }, \"https://upload.wikimedia.org/wikipedia/commons/0/07/Shared_Disk_Architecture.jpg\"))), mdx(\"div\", {\n    \"className\": \"footnotes\"\n  }, mdx(\"hr\", {\n    parentName: \"div\"\n  }), mdx(\"ol\", {\n    parentName: \"div\"\n  }, mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-sn\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.geeksforgeeks.org/difference-between-shared-nothing-architecture-and-shared-disk-architecture/\"\n  }, \"https://www.geeksforgeeks.org/difference-between-shared-nothing-architecture-and-shared-disk-architecture/\"), mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-sn\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[{"contextLine":"- See also: [[sharding]]","targetAnchor":null,"refWord":"sharding","target":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"sharding\"), mdx(\"h2\", null, \"Difference sharding \", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"consistent-hashing\",\n    \"title\": \"consistent-hashing\"\n  }, \"[[consistent-hashing]]\"), \"\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\\"You can think of sharding as the decision to put your data on multiple machines, and consistent hashing as one of\\nmany methods of determining which machine any particular piece of data goes to.\\\" \", mdx(\"sup\", {\n    parentName: \"p\",\n    \"id\": \"fnref-shard\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-shard\",\n    \"className\": \"footnote-ref\"\n  }, \"shard\")))), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Sharding is the act of taking a data set and splitting it across multiple machines. When you shard you say you\\u2019re\\nmoving data around, but you haven\\u2019t yet answered the question of which machine takes what subset of data.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Consistent hashing is an algorithm for assigning a set of keys to machines\")), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Man kann sharding ohne consistent hashing nutzen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reines consistent hashing kann auch Vorteile haben\")), mdx(\"h2\", null, \"Pro/Con sharding\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Pro\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Con\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Very good scaling\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Merging and splitting can get complicated\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Avoids over usage\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"It has to be taken care on application level\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Improves partion tolerance\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Shards are complicated\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Source:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.quora.com/What-advantages-and-disadvantages-does-database-sharding-have\"\n  }, \"https://www.quora.com/What-advantages-and-disadvantages-does-database-sharding-have\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://medium.com/system-design-blog/database-sharding-69f3f4bd96db\"\n  }, \"https://medium.com/system-design-blog/database-sharding-69f3f4bd96db\"))))), mdx(\"div\", {\n    \"className\": \"footnotes\"\n  }, mdx(\"hr\", {\n    parentName: \"div\"\n  }), mdx(\"ol\", {\n    parentName: \"div\"\n  }, mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-shard\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.quora.com/What-is-the-difference-between-consistent-hashing-and-sharding-in-a-distributed-system\"\n  }, \"https://www.quora.com/What-is-the-difference-between-consistent-hashing-and-sharding-in-a-distributed-system\"), mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-shard\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"8bbe0959-8054-59be-b8e4-66210387642a","fields":{"slug":"/sharding","title":"sharding"}}}}],"inboundReferences":[{"contextLine":"2. [[shared-disk-architecture]]","referrer":{"parent":{"id":"558193fc-67dc-52e1-a6b4-dac2452a6176","fields":{"slug":"/verteilung-von-daten","title":"verteilung-von-daten"}}}}]},"fields":{"slug":"/shared-disk-architecture","title":"shared-disk-architecture"}}},"pageContext":{"id":"22b6f149-5381-5b48-a962-e52877ac72e7","refWordMdxSlugDict":{"sharding":"sharding","consistent-hashing":"consistent-hashing"}}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}